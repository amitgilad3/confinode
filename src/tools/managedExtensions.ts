import { writeFileSync } from 'fs'
import { resolve } from 'path'

import { Loader } from '..'
// eslint-disable-next-line import/no-internal-modules
import { extensionsLoaders, loaderDescriptions } from '../Loader/loaders'

if (process.argv.length !== 3) {
  throw new Error('Incorrect argument count â€” expected only the target file')
}
const fileName = resolve(process.argv[2])

function formatModuleName(module: string | undefined): string {
  let moduleItems = (module ?? '').split('/')
  moduleItems = moduleItems.slice(0, moduleItems[0].startsWith('@') ? 2 : 1)
  return moduleItems.join('/')
}

const loaders: { [name: string]: Loader | undefined } = {}
// eslint-disable-next-line @typescript-eslint/no-empty-function
const fakeObject: any = new Proxy(() => {}, {
  apply() {
    return fakeObject
  },
  construct() {
    return {}
  },
  get() {
    return fakeObject
  },
  set() {
    return true
  },
  deleteProperty() {
    return true
  },
  enumerate() {
    return []
  },
  ownKeys() {
    return []
  },
  has() {
    return true
  },
  defineProperty() {
    return true
  },
  getOwnPropertyDescriptor() {
    return undefined
  },
})
function buildModuleHasSyncMethod(name: string): string {
  if (!(name in loaders)) {
    try {
      loaders[name] = new loaderDescriptions[name].Loader(fakeObject)
    } catch (e) {
      // eslint-disable-next-line no-console
      console.log(`Warning: could not create loader for ${name}:\n${String(e)}`)
      loaders[name] = undefined
    }
  }
  const loader = loaders[name]
  if (loader) {
    return 'syncLoad' in loader ? ':heavy_check_mark:' : ':x:'
  } else {
    return ':question:'
  }
}

const extensions = Object.keys(extensionsLoaders).sort()
const descriptionNames = Object.keys(loaderDescriptions)
const rowSeparator = '\n    </tr>\n    <tr>\n      '
const text =
  `# Extensions

This file is automatically generated. Do not edit.

<table>
  <thead>
    <tr>
      <th>Extension</th>
      <th>Loader</th>
      <th>Synchronous<sup>*</sup></th>
      <th>Module</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      ` +
  extensions
    .map(
      key =>
        `<td rowspan=${extensionsLoaders[key].length}>.${key}</td>` +
        [...extensionsLoaders[key]]
          .sort()
          .map(
            name =>
              `<td>${name}</td><td align="center">${buildModuleHasSyncMethod(
                name
              )}</td><td>${formatModuleName(loaderDescriptions[name].module)}</td>`
          )
          .join(rowSeparator)
    )
    .join(rowSeparator) +
  `
    </tr>
  </tbody>
</table>

[*] All loaders can be used asynchronously.
`

writeFileSync(fileName, text)
// eslint-disable-next-line no-console
console.log(`Written ${extensions.length} extensions for ${descriptionNames.length} loaders to ${fileName}`)
